!function (e) {
  "use strict";
  const t = "showRoleMenu"
    , n = "showRoleInfo"
    , i = "reRenderInOut"
    , r = "reRenderLinesKeywords"
    , a = "reComputeLines"
    , l = "showMessage"
    , o = "showTxtToolBarMenu"
    , d = "fontAddDeleteLine"
    , s = "insertRightClickBase"
    , c = "closeRuleMenuWindow"
    , h = "addAnchorTracking"
    , u = "importantError"
    , f = "markPinyin";
  let m = 0
    , p = 0
    , y = 0
    , g = 0
    , b = 0
    , j = 0
    , v = 0
    , C = 0
    , Q = !1;
  var k = tinymce.util.Tools.resolve("tinymce.PluginManager");
  let x = []
    , w = null
    , T = ""
    , S = ["~", "～", "!", "！", "#", "＃", "…", "-", "=", "_", "－", "＿", "＝", "、", ";", ",", "；", "?", "？", "。", "，"]
    , E = "";
  function L() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function (e) {
      let t = 16 * Math.random() | 0;
      return ("x" == e ? t : 3 & t | 8).toString(16)
    }
    ))
  }
  let X = {
    insertRole(e) {
      let t = jQuery(this.getBody())
        , n = this.selection.getContent({
          format: "html"
        })
        , { lids: r } = e
        , o = ""
        , d = n => {
          let i = n.shift();
          if (!i)
            return !0;
          let r = t.find("mark[data-lid=" + i + "]");
          if (1 != r.length)
            return r.length > 1 ? (Y(i),
              W.bind(w)(l, {
                content: "请您重新画一次锚点。",
                type: "warning",
                time: 15e3
              }),
              !1) : (W.bind(this)(h, [{
                action: "E:画锚点-没找到台词",
                lid: i
              }]),
                W.bind(w)(u, {
                  content: "DE: 画锚点出现错误，没有找到对应的台词。"
                }),
                !1);
          {
            let t = jQuery(r[0])
              , n = t.clone(!0)
              , a = ""
              , l = "";
            n.is(".tj-role-selection") ? (n.find(".tj-role-name").remove(),
              a = n.html() || "",
              a = a.trim(),
              l = "替换") : (a = n.html() || "",
                l = "新画");
            let d = D(e, a, i, l);
            if (a = d.html,
              o = d.lastLid,
              !a)
              return W.bind(this)(h, [{
                action: "E:画锚点-生成内容出错",
                lid: i,
                params: e,
                oldHTML: n.html() || ""
              }]),
                W.bind(w)(u, {
                  content: "DE: 请您尝试选中内容，点击清除格式后，再画本。"
                }),
                !1;
            t.replaceWith(a),
              Me()
          }
          d(n)
        }
        ;
      Array.isArray(r) && r.length ? d(r) : (o = N("anchor", n, e),
        Me()),
        W.bind(this)(i),
        W.bind(this)(a),
        this.undoManager.add(),
        X.findNextLines.bind(this)(e, o),
        o && (E = o)
    },
    clearRole(e) {
      let t = this.selection.getNode();
      if (t = jQuery(t),
        !t.is(".tj-role-selection"))
        return !1;
      let n = t.clone(!0)
        , r = n.attr("data-rnid")
        , l = n.attr("data-lid");
      n.removeAttr("data-rnid");
      let o = ae(n[0]);
      n.find(".tj-role-name").remove();
      let d = n.html();
      d = d.replace(/^\s+|\s+$/g, "");
      let s = L();
      d = '<mark class="lines-keywords" ' + o.join(" ") + ' optid="' + s + '">' + d + "</mark>",
        t.replaceWith(d);
      let c = jQuery(this.getBody()).find("mark[optid=" + s + "]");
      c.removeAttr("optid"),
        this.selection.select(c[0]),
        this.selection.setCursorLocation(c[0], 0),
        W.bind(this)(i),
        W.bind(this)(a),
        this.undoManager.add(),
        W.bind(this)(h, [{
          lid: l,
          rnid: r,
          action: "清除锚点"
        }])
    },
    clearRoleDeep(e, t) {
      let n = [];
      for (let i of e) {
        i = jQuery(i);
        let e = "";
        if (i.is(".tj-role-selection")) {
          let t = i.clone(!0);
          t.find('span[style*="line-through"]').each(((e, t) => {
            (t = jQuery(t)).replaceWith(t.html())
          }
          ));
          let r = t.attr("data-rnid")
            , a = t.attr("data-lid");
          n.push({
            lid: a,
            rnid: r,
            action: "清除锚点"
          }),
            t.removeAttr("data-rnid"),
            t.find(".tj-role-name").remove();
          let l = t.html();
          l = l.replace(/^\s+|\s+$/g, ""),
            e = l
        } else
          e = i.html() || "";
        "RemoveFormat" == t && ((e.startsWith("“") || e.startsWith("”")) && (e = e.slice(1)),
          (e.endsWith("“") || e.endsWith("”")) && (e = e.slice(0, e.length - 1))),
          i.replaceWith(e)
      }
      e.length && (W.bind(this)(a),
        this.undoManager.add()),
        n.length && W.bind(this)(h, n)
    },
    replaceRole(e) {
      let { lids: t } = e
        , n = jQuery(this.getBody())
        , r = t => {
          let i = t.shift();
          if (!i)
            return !0;
          let a = n.find("mark[data-lid=" + i + "]");
          if (1 != a.length)
            return a.length > 1 ? (W.bind(w)(u, {
              content: "RE1: 出现未知错误。"
            }),
              W.bind(this)(h, [{
                action: "E:替换锚点-出现相同ID",
                lid: i
              }]),
              !1) : (W.bind(this)(h, [{
                action: "E:替换锚点-没找到要替换的锚点",
                lid: i
              }]),
                W.bind(w)(u, {
                  content: "RE2: 出现未知错误。"
                }),
                !1);
          {
            let t = jQuery(a[0])
              , n = "";
            t.attr("data-rnid") && (t.find(".tj-role-name").remove(),
              n = t.html() || "",
              n = n.trim(),
              n = D(e, n, i, "替换").html),
              n ? (t.replaceWith(n),
                E = i) : W.bind(this)(h, [{
                  action: "E:替换锚点-内容生成错误",
                  lid: i,
                  params: e,
                  oldHTML: t.html()
                }])
          }
          r(t)
        }
        ;
      t.length ? (r(t),
        W.bind(this)(i),
        W.bind(this)(a),
        this.undoManager.add()) : (W.bind(this)(h, [{
          action: "E:替换锚点-锚点ID为空",
          lids: t
        }]),
          W.bind(w)(u, {
            content: "RE3: 出现未知错误。"
          }))
    },
    roleMenuHide() { },
    wordsHighlight(e, t) {
      let n = this.getBody();
      this.dom[e.addClass ? "addClass" : "removeClass"](n, "lines" == e.type ? "lines-highlight" : "role-name-highlight"),
        this.focus()
    },
    setContent(e) {
      this.setContent(e.content),
        te.bind(this)(),
        W.bind(this)(c),
        $e((() => {
          this.undoManager.add(),
            Me()
        }
        ))
    },
    initContent(e) {
      this.resetContent(e.content),
        e.chapterId ? jQuery(this.getBody()).attr("data-cid", e.chapterId) : jQuery(this.getBody()).removeAttr("data-cid"),
        te.bind(this)(),
        W.bind(this)(c),
        $e((() => {
          Me()
        }
        ))
    },
    insertRightClickContent(e) {
      if ("object" == typeof e) {
        let t = this.selection.getNode();
        this.selection.getContent() && this.selection.setCursorLocation(t, 0);
        let n = tinymce.dom.DomQuery
          , i = this.selection.getNode();
        i = n(i);
        let r = A(e);
        if (i.hasClass("tj-role-selection") || i.hasClass("tj-rc-item") || i.hasClass("lines-keywords"))
          return i.before(r),
            !0;
        if (i.hasClass("hl-role-name")) {
          let e = i.parent("mark[data-lid]");
          return e.length ? (e.before(r),
            !0) : (i.before(r),
              !0)
        }
        if (i.is("body"))
          return !0;
        if (i.hasClass("tj-role-name"))
          return i.parent().before(r),
            !0;
        if (i.hasClass("tj-cursor-insert"))
          return i.replaceWith(r),
            !0;
        this.selection.setContent(r)
      } else {
        let t = this.selection.getNode();
        if (t = jQuery(t),
          t.is("body"))
          return !0;
        let n = this.selection.getContent({
          format: "html"
        })
          , i = jQuery("<div></div>");
        if (i.append(n),
          i.find("mark[data-lid]").length)
          return W.bind(w)(l, {
            content: "选中的内容，不能包含角色音。",
            type: "warning",
            time: 1e4
          }),
            !0;
        if (i.find(".tj-rc-item").length)
          return W.bind(w)(l, {
            content: "选中的内容，不能包含右键插入内容。",
            type: "warning",
            time: 1e4
          }),
            !0;
        let a = e.toString();
        a = a.trim();
        let o = ["“”", "“", "”"];
        if ((t.hasClass("tj-role-selection") || t.hasClass("tj-rc-item") || t.hasClass("lines-keywords") || t.hasClass("tj-role-name")) && o.includes(a))
          return W.bind(w)(l, {
            content: "不能在该位置插入引号。",
            type: "warning",
            time: 1e4
          }),
            !0;
        ("“”" == a || "‘’" == a) && Le(n) ? (a = a.split(""),
          n = a[0] + n + a[1],
          this.selection.setContent(n)) : this.selection.setContent(a),
          W.bind(this)(r, {
            action: "render"
          })
      }
    },
    replaceRightClickContent(e) {
      if ("string" == typeof e)
        return !1;
      (0,
        tinymce.dom.DomQuery)(this.selection.getNode()).replaceWith(A(e))
    },
    clearRightClickContent(e) {
      (0,
        tinymce.dom.DomQuery)(this.selection.getNode()).remove()
    },
    editorDisplaySet(e) {
      let t = (0,
        tinymce.dom.DomQuery)(this.getDoc()).find("head");
      t.find("#editorStyles").remove(),
        t.append(`\n        <style type="text/css" id="editorStyles">\n          body.mce-content-body {\n            font-size: ${e.fontSize}px;\n            font-family: ${e.fontFamily};\n            line-height: ${e.lineHeight}em;\n            letter-spacing: ${e.fontSpace}px;\n            font-weight: ${e.fontWeight || "normal"};\n          }\n          .mce-content-body p {\n            margin: ${e.pSpace}em 0px;\n          }\n        </style>\n      `)
    },
    selectTxtColor(e) {
      if ("doubleAside" == we())
        return !1;
      if (this.readonly)
        return !1;
      let t = this.selection.getContent({
        format: "html"
      });
      if (!t || !t.trim())
        return !1;
      let n = jQuery("<div></div>")
        , i = jQuery(this.getBody());
      n.append(t),
        n.find(".tj-txt-style").each(((e, t) => {
          let n = t.innerHTML;
          jQuery(t).replaceWith(n)
        }
        )),
        i.find(".tj-txt-style").each(((e, t) => {
          Le(t.innerText || "") || jQuery(t).remove()
        }
        )),
        N("txtStyle", n.html(), e)
    },
    addDeleteLine() {
      let e = this.selection.getNode();
      if (e) {
        let { style: t } = e;
        if (t) {
          let { textDecorationLine: e, textDecoration: n } = t
            , i = e || n;
          if (i = i || "",
            i.indexOf("line-through") > -1)
            return W.bind(this)(l, {
              content: "不能再删除线上，再画删除线。",
              type: "warning",
              time: 1e4
            }),
              !1
        }
        if (jQuery(e).parents('[style*="line-through"]').length)
          return W.bind(this)(l, {
            content: "不能再删除线上，再画删除线。",
            type: "warning",
            time: 1e4
          }),
            !1
      }
      let t = this.selection.getContent()
        , n = jQuery("<div></div>");
      if (n.append(t),
        n.find('[style*="line-through"]').length)
        return W.bind(this)(l, {
          content: "不能再删除线上，再画删除线。",
          type: "warning",
          time: 1e4
        }),
          !1;
      let i = jQuery(this.getBody());
      i.find(".tj-role-name").removeAttr("contenteditable").removeClass("mceNonEditable"),
        i.find(".tj-py").removeAttr("contenteditable").removeClass("mceNonEditable"),
        this.execCommand("Strikethrough"),
        i.find(".tj-role-name").attr("contenteditable", "false").addClass("mceNonEditable"),
        i.find(".tj-py").attr("contenteditable", "false").addClass("mceNonEditable"),
        Me()
    },
    removeDeleteLine() {
      let e = this.selection.getNode()
        , t = this.selection.getContent()
        , n = e => {
          if (((e = jQuery(e)).attr("style") || "").indexOf("line-through") < 0)
            return !1;
          if (e.is("span"))
            e.replaceWith(e.html());
          else {
            let t = We(e.attr("style"))
              , n = We(e.attr("data-mce-style"));
            e.hasClass("mceNonEditable") ? (e.removeClass("mceNonEditable"),
              e.attr("style", t),
              e.attr("data-mce-style", n),
              e.addClass("mceNonEditable")) : (e.attr("style", t),
                e.attr("data-mce-style", n))
          }
        }
        ;
      if (jQuery(e).is("body")) {
        if (!t)
          return !1;
        let e = jQuery(this.getBody())
          , i = jQuery("<div></div>");
        i.append(t),
          i.find("p").each(((t, i) => {
            let r = (i = jQuery(i)).attr("data-pid")
              , a = e.find("p[data-pid=" + r + "]").find('[style*="line-through"]');
            for (let e = a.length - 1; e >= 0; e--)
              n(a[e])
          }
          ))
      } else {
        e = jQuery(e);
        let t = e.parents('[style*="line-through"]')
          , i = e.find('[style*="line-through"]');
        for (let e = i.length - 1; e >= 0; e--)
          n(i[e]);
        i = t.find('[style*="line-through"]');
        for (let e = i.length - 1; e >= 0; e--)
          n(i[e]);
        0 == i.length && n(e),
          t.each(((e, t) => {
            n(t)
          }
          ))
      }
    },
    execCommands(e) {
      if ("RemoveFormat" == e || "RemoveFormat2" == e) {
        let t = []
          , { role: n } = Ee();
        if (n)
          t = [n];
        else {
          let e = this.selection.getContent({
            format: "html"
          })
            , n = J(e);
          n.length && (t = n)
        }
        t.length ? X.clearRoleDeep.bind(this)(t, e) : (this.execCommand("RemoveFormat"),
          W.bind(this)(a))
      } else
        this.execCommand(e),
          W.bind(this)(a);
      W.bind(this)(c),
        W.bind(this)(i),
        Me()
    },
    scrollToPercent(e) {
      P.bind(this)(e.percent)
    },
    syncHotKeyList(e) {
      x = e.list
    },
    scrollToLines(e) {
      let t = (0,
        tinymce.dom.DomQuery)(this.getBody())
        , { lid: n, renderLineMark: i } = e;
      !1 !== i && (i = !0);
      let r = t.find("mark[data-lid=" + n + "]");
      r.length && (t.find(".current-lines").remove(),
        i && r.prepend('<div class="current-lines"></div>'),
        r[0].scrollIntoView({
          block: "center"
        }))
    },
    writerScrollToLines(e, t = !0) {
      let n = jQuery(this.getBody())
        , { lid: i } = e
        , r = [];
      if (r = i ? n.find("mark[data-lid=" + i + "]") : e,
        r.length) {
        if (r[0].scrollIntoView({
          block: "center"
        }),
          !t)
          return !1;
        r.addClass("animate__animated  animate__flash"),
          r.one("animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd", (() => {
            r.removeClass("animate__animated  animate__flash")
          }
          ))
      }
    },
    findNextLines(e, t) {
      if (!e || !e.positionNextLines || !t)
        return !1;
      let n, i = jQuery(w.getBody()).find("mark[data-lid]"), r = null;
      i.each(((e, i) => {
        if ((i = jQuery(i)).attr("data-lid") === t && (n = e),
          void 0 !== n && e > n && i.hasClass("lines-keywords"))
          return r = i,
            !1
      }
      )),
        r && X.writerScrollToLines.bind(this)(r, !1)
    },
    changeTheme(e) {
      let t = this.getBody().classList;
      for (let e of t)
        e.indexOf("tj_theme_") > -1 && t.remove(e);
      "tj_theme_default" !== e && t.add(e),
        setTimeout((() => {
          B(T)
        }
        ), 10)
    },
    toPaste() {
      he.bind(this)()
    },
    toShiftPaste() {
      ue.bind(this)()
    },
    toCopy() {
      se.bind(this)()
    },
    toCut() {
      ce.bind(this)()
    },
    formatLines2p() {
      let e = jQuery(this.getContent())
        , t = jQuery("<div></div>");
      t.append(e),
        t.find("p").each(((e, t) => {
          t = jQuery(t);
          let n = jQuery('<p data-pid="' + L() + '"></p>')
            , i = jQuery("<div></div>")
            , r = []
            , a = !1;
          if (t.contents().each(((e, t) => {
            if (1 == t.nodeType)
              if ((t = jQuery(t)).is(".tj-rc-item"))
                r.push(t);
              else if (t.is(".tj-role-selection")) {
                r.push(t),
                  r.forEach((e => {
                    n.append(e.clone(!0))
                  }
                  )),
                  r[0].after(n),
                  r.forEach((e => {
                    e.remove()
                  }
                  )),
                  r = [],
                  a = !0,
                  n = jQuery('<p data-pid="' + L() + '"></p>')
              } else if (t.is(".lines-keywords")) {
                let e = t.text();
                if (De(e)) {
                  r.push(t),
                    r.forEach((e => {
                      n.append(e.clone(!0))
                    }
                    )),
                    r[0].after(n),
                    r.forEach((e => {
                      e.remove()
                    }
                    )),
                    r = [],
                    a = !0,
                    n = jQuery('<p data-pid="' + L() + '"></p>')
                } else
                  r = []
              } else {
                let e = t.text();
                Le(e) && (r = [])
              }
            else
              r = []
          }
          )),
            a) {
            let e = jQuery('<p data-pid="' + L() + '"></p>')
              , n = t.contents();
            n.each(((t, r) => {
              (r = jQuery(r)).is("p") ? (i.append(e),
                i.append(r),
                e = jQuery('<p data-pid="' + L() + '"></p>')) : (e.append(r),
                  n.length - 1 == t && i.append(e))
            }
            )),
              i.find("p").each(((e, t) => {
                t = jQuery(t),
                  Le(t.text()) || t.remove()
              }
              )),
              t.replaceWith(i.html())
          }
        }
        )),
        X.setContent.bind(this)({
          content: t.html()
        })
    },
    clearHideRoleMessageTid() {
      clearTimeout(b)
    },
    renderAnchorStyle(e) {
      T = e,
        B(e)
    },
    insertRightClickContentPlus(e) {
      let t = this.selection.getContent({
        format: "html"
      })
        , n = this.selection.getNode();
      if (n = $(n),
        n.is("body")) {
        if ("string" == typeof e)
          return !1;
        let n = A(e)
          , i = jQuery("<div></div>");
        i.append(t);
        let r = jQuery(this.getBody());
        i.find("p").each(((e, t) => {
          let i = (t = $(t)).attr("data-pid");
          if (i) {
            let e = (t = r.find("p[data-pid=" + i + "]")).find("mark[data-lid]");
            e.length ? e.each(((e, t) => {
              $(t).before(n)
            }
            )) : $(t[0]).prepend(n)
          }
        }
        ))
      } else if (n.is("p"))
        if (t = Le(t),
          t) {
          let t = n.find("mark[data-lid]");
          if (t.length)
            if ("string" == typeof e)
              X.insertRightClickContent.bind(this)(e);
            else {
              this.selection.setCursorLocation(n[0], 0);
              let i = A(e);
              t.each(((e, t) => {
                $(t).before(i)
              }
              ))
            }
          else
            X.insertRightClickContent.bind(this)(e)
        } else
          X.insertRightClickContent.bind(this)(e);
      else
        X.insertRightClickContent.bind(this)(e);
      w.undoManager.add()
    },
    mergeMoreP() {
      let e = w.selection.getContent()
        , t = jQuery("<div></div>");
      t.append(e);
      let n = t.find("p")
        , i = jQuery(w.getBody());
      if (n.length <= 1)
        return W.bind(w)(l, {
          content: "请您选择多个自然段进行合并。",
          type: "warning",
          time: 1e4
        }),
          !1;
      let r = jQuery('<p data-pid="' + L() + '"></p>')
        , a = [];
      if (n.each(((e, t) => {
        let n = (t = $(t)).attr("data-pid")
          , l = i.find("p[data-pid=" + n + "]");
        l.length && (r.append(l.html()),
          a.push(l))
      }
      )),
        a.length) {
        a[a.length - 1].after(r),
          a.forEach((e => {
            e.remove()
          }
          )),
          w.undoManager.add(),
          Me(),
          W.bind(this)(c)
      }
    },
    mergeMoreLines() {
      let e = w.selection.getContent()
        , t = jQuery("<div></div>");
      t.append(e);
      let n = t.find("mark[data-lid]");
      if (n.length <= 1)
        return W.bind(w)(l, {
          content: "请您选择多句台词进行合并。",
          type: "warning",
          time: 1e4
        }),
          !1;
      let r = jQuery(w.getBody())
        , a = n.first()
        , o = a.attr("data-lid");
      if (a = r.find("mark[data-lid=" + o + "]"),
        1 !== a.length)
        return !1;
      n = [...n],
        n.shift();
      let d = [];
      for (let e of n) {
        e = jQuery(e);
        let t = e.attr("data-lid")
          , n = r.find("mark[data-lid=" + t + "]");
        if (0 == n.length)
          continue;
        let i = jQuery(n[0]).clone();
        n.is(".tj-role-selection") && i.find(".tj-role-name").remove();
        let a = (i.text() || "").trim();
        a && ((a.startsWith("“") || a.startsWith("”")) && (a = a.slice(1)),
          (a.endsWith("“") || a.endsWith("”")) && (a = a.slice(0, a.length - 1))),
          d.push(a),
          jQuery(n[0]).remove()
      }
      if (d.length) {
        let e = d.join("")
          , t = a.text()
          , n = a.html();
        if (t.endsWith("”")) {
          let t = n.lastIndexOf("”");
          e = n.slice(0, t) + e + "”"
        } else
          e = n + e;
        a.html(e),
          $e((() => {
            w.undoManager.add(),
              Me(),
              W.bind(this)(c),
              W.bind(this)(i)
          }
          ))
      }
    },
    mergeAsideContent() {
      let e = jQuery(w.getBody())
        , t = jQuery("<div></div>")
        , n = jQuery('<p data-pid="' + L() + '"></p>')
        , i = e.find("p");
      i.each(((e, r) => {
        (r = jQuery(r).clone(!0)).find("mark[data-lid]").length ? (t.append(n),
          t.append(r),
          n = jQuery('<p data-pid="' + L() + '"></p>')) : (n.append(r.html() || ""),
            i.length - 1 == e && t.append(n))
      }
      )),
        t.find("p").each(((e, t) => {
          t = jQuery(t),
            Le(t.text()) || t.remove()
        }
        )),
        X.setContent.bind(w)({
          content: t.html()
        })
    },
    moveP(e) {
      Re(e)
    },
    replaceDoubleQuteToSingle() {
      let e = jQuery(w.selection.getNode());
      if (e.is(".lines-keywords")) {
        let t = e.html() || "";
        t = t.replace(/“/g, "‘").replace(/”/g, "’"),
          e.replaceWith(t)
      } else {
        let e = w.selection.getContent()
          , t = jQuery("<div></div>");
        t.append(e);
        let n = t.find(".lines-keywords");
        if (!n.length)
          return W.bind(w)(l, {
            content: "请您选择要操作的台词。",
            type: "warning",
            time: 1e4
          }),
            !1;
        let i = jQuery(w.getBody());
        for (let e of n) {
          e = jQuery(e);
          let t = e.attr("data-lid")
            , n = i.find("mark[data-lid=" + t + "]");
          if (0 == n.length)
            continue;
          let r = n.html() || "";
          r = r.replace(/“/g, "‘").replace(/”/g, "’"),
            n.replaceWith(r)
        }
      }
    },
    getMarkPinyinTxt() {
      let e = w.selection.getContent()
        , t = jQuery("<div></div>");
      if (t.append(e),
        t.children().length)
        return W.bind(w)(l, {
          content: "请您分开选择文字进行标注。",
          type: "info",
          time: 1e4
        }),
          !1;
      if (jQuery(w.selection.getNode()).is(".tj-rt"))
        return !1;
      let n = w.selection.getContent({
        type: "text"
      });
      if (n = Le(n),
        !n)
        return !1;
      W.bind(w)(f, {
        content: n
      })
    },
    markPinyin(e) {
      let { list: t, pyid: n } = e;
      if (n)
        jQuery(w.getBody()).find("p mark[data-pyid=" + n + "]").each(((e, n) => {
          n = jQuery(n);
          let { text: i, pinyin: r, pinyin2: a } = t[0];
          (n = n.find(".tj-rt")).attr("data-py", a),
            n.text(`(${r})`)
        }
        )),
          w.undoManager.add();
      else {
        let e = w.selection.getContent({
          type: "text"
        })
          , n = [];
        for (let e of t) {
          let { text: t, pinyin: i, pinyin2: r } = e;
          i ? n.push(`<mark class="tj-py mceNonEditable" data-pyid="${L()}">${t}<mark class="tj-rt" data-py="${r}">(${i})</mark></mark>`) : n.push(t)
        }
        if (e = Le(e),
          !e)
          return !1;
        w.selection.setContent(n.join("")),
          w.undoManager.add()
      }
    },
    clearPinyin(e) {
      let { pyid: t } = e;
      if (!t)
        return !1;
      jQuery(w.getBody()).find("p mark[data-pyid=" + t + "]").each(((e, t) => {
        let n = (t = jQuery(t)).clone();
        n.find(".tj-rt").remove();
        let i = Le(n.text());
        i ? t.replaceWith(i) : t.remove()
      }
      )),
        w.undoManager.add()
    },
    focusNextLiens(e = 1) {
      let t = localStorage.positionNextLinesByTab || "{}";
      if (t = JSON.parse(t),
        !1 === t)
        return !1;
      let n = jQuery(w.getBody()).find("mark[data-lid]")
        , i = null;
      if (!n.length)
        return !1;
      if (E) {
        n = [...n];
        let t = 0;
        for (let i = 0; i < n.length; i++) {
          if (n[i].dataset.lid == E) {
            t = i + e;
            break
          }
        }
        i = n[t] || n[0]
      } else
        i = n[0];
      w.selection.setCursorLocation(i, 0),
        w.selection.select(i),
        i.scrollIntoView({
          block: "center"
        }),
        E = i.dataset.lid,
        requestAnimationFrame((() => {
          let { top: e, left: t, height: n, width: r } = i.getBoundingClientRect();
          O.bind(w)({
            clientX: t + r,
            clientY: e + n,
            layerX: 0,
            layerY: 0,
            offsetX: 0,
            offsetY: 0,
            pageX: 0,
            pageY: 0,
            screenX: 0,
            screenY: 0,
            currentTarget: i
          }, jQuery(i))
        }
        ))
    }
  }
    , Y = function (e) {
      jQuery(w.getBody()).find("mark[data-lid=" + e + "]").each(((e, t) => {
        e > 0 && jQuery(t).attr("data-lid", L())
      }
      ))
    }
    , B = function (e) {
      let t = jQuery(w.getBody()).css("background")
        , n = (0,
          tinymce.dom.DomQuery)(w.getDoc()).find("head");
      n.find("#anchorStyles").remove(),
        e && "red" == e.style && n.append(`\n        <style type="text/css" id="anchorStyles">\n          body.mce-content-body .tj-role-name {\n            background: ${t};\n            color: #F56C6C;\n          }\n        </style>\n      `)
    }
    , D = function (t, n, i, r = "新画") {
      let a = []
        , { role: l, anchor: o } = t
        , d = JSON.parse(o.content)
        , s = ""
        , c = (i, l) => {
          if (!Le(n))
            return "";
          let o = jQuery("<div></div>");
          if (o.append(n),
            o.find("mark[data-lid]").length)
            return a.push({
              lid: l,
              content: n,
              action: "E:生成锚点内容-" + r + "-台词嵌套"
            }),
              "error";
          let { mainRoleName: c, memberName: h } = i
            , u = c.name
            , f = h || "无"
            , { roleInfo: m } = d;
          if (m = m || [],
            m.length) {
            let t = []
              , n = new Map;
            for (let t of e.SEX)
              n.set("" + t.value, t.label);
            for (let e of m) {
              let { key: r, enable: a } = e;
              if (a) {
                let e = i[r];
                e ? "sex" == r && (e = n.get("" + e)) : e = "无",
                  t.push(e)
              }
            }
            t.length && (u += `(${t.join("-")})`)
          }
          let p = {
            role: `【${u}】`,
            cv: `【${f}】`,
            "role-cv": `【${u}-${f}】`,
            "cv-role": `【${f}-${u}】`,
            none: ""
          }
            , y = []
            , g = {
              "role-style": JSON.parse(i.style)
            }["role-style"];
          for (let e in g)
            y.push(e + ":" + g[e]);
          if (y = y.join(";"),
            n = o.text(),
            a.push({
              lid: l,
              rnid: c.id,
              action: "生成锚点内容-" + r
            }),
            t.fillAsideSymbol) {
            let e = n.slice(0, 1)
              , t = n.slice(n.length - 1)
              , i = ["“", "”", '"'];
            i.includes(e) && (n = n.slice(1)),
              i.includes(t) && (n = n.slice(0, n.length - 1)),
              n = "“" + n + "”"
          }
          return s = l,
            '<mark data-rnid="' + c.id + '" data-lid="' + l + '" data-hand="2" class="tj-role-selection" style="' + y + '"><mark class="tj-role-name tj-remove-mark mceNonEditable" data-rid="' + i.id + '">' + p[d.display] + "</mark>" + n + "</mark>"
        }
        ;
      if (Array.isArray(l)) {
        let e = "";
        for (let t of l) {
          let n = c(t, L());
          if ("error" === n) {
            e = "";
            break
          }
          e += n
        }
        return W.bind(this)(h, a),
        {
          html: e,
          lastLid: s
        }
      }
      {
        let e = c(l, i || L());
        return "error" === e && (e = ""),
          W.bind(this)(h, a),
        {
          html: e,
          lastLid: s
        }
      }
    }
    , M = function (e, t) {
      if (!t)
        return "";
      let n = (new Date).getTime()
        , i = "";
      for (let t in e)
        e[t] && (i = i + t + ":" + e[t] + ";");
      return '<mark class="tj-txt-style ' + n + '" style="' + i + '">' + t + "</mark>"
    }
    , N = function (e, t, n) {
      let i = jQuery(w.getBody())
        , r = jQuery("<div></div>")
        , a = "anchor" == e ? "锚点" : "样式";
      if (r.append(t),
        r.find(".tj-rc-item").length)
        return W.bind(w)(l, {
          content: `不能再右键插入的内容上画${a}。`,
          type: "warning",
          time: 1e4
        }),
          !1;
      let o = r.find("p")
        , d = "";
      if (o.length) {
        let r = []
          , s = ""
          , c = null
          , f = new Set;
        o.each(((e, t) => {
          f.add(t.dataset.pid)
        }
        ));
        let m = function (e) {
          let t = !1
            , n = jQuery(w.getBody());
          for (let i of e.values())
            n.find("p[data-pid=" + i + "]").each(((e, n) => {
              e > 0 && (jQuery(n).attr("data-pid", L()),
                t = !0)
            }
            ));
          return t
        }(f);
        if (m)
          return W.bind(w)(l, {
            content: "请您重新操作一次。",
            type: "warning",
            time: 15e3
          }),
            !1;
        if (o.each(((l, f) => {
          let m = f.innerHTML
            , p = Le(f.innerText)
            , y = f.dataset.pid
            , g = i.find("p[data-pid=" + y + "]");
          if (g.length) {
            g = g[0];
            g.innerHTML;
            let u = Le(g.innerText);
            if ("anchor" === e) {
              let e = D(n, m);
              t = e.html,
                d = e.lastLid
            } else
              t = M(n, m);
            p === u ? (0 == l && (c = jQuery(g).prev(),
              c.length || (c = i)),
              g = jQuery(g).clone(!0),
              g.html(t),
              s += g.prop("outerHTML")) : 0 == l ? (r.push({
                pid: g.dataset.pid,
                html: t,
                action: "after"
              }),
                c = jQuery(g)) : l == o.length - 1 ? r.push({
                  pid: g.dataset.pid,
                  html: t,
                  action: "before"
                }) : W.bind(this)(h, [{
                  action: `E:旁白-P标签-画${a}出错`,
                  html: g.outerHTML
                }])
          } else
            W.bind(this)(h, [{
              action: `E:旁白-没找到P标签-画${a}`
            }]),
              W.bind(w)(u, {
                content: `PE1: 画${a}出现错误。`
              })
        }
        )),
          0 == r.length && !s)
          return W.bind(this)(h, [{
            action: `E:旁白-多段处理错误-画${a}`,
            html: t
          }]),
            W.bind(w)(u, {
              content: `PE2: 画${a}出现错误。`
            }),
            !1;
        w.selection.setContent("");
        for (let e of r) {
          let t = i.find("p[data-pid=" + e.pid + "]");
          "after" == e.action ? e.html && t.append(e.html) : "before" == e.action && e.html && t.prepend(e.html)
        }
        c ? (c.is("body") ? c.prepend(s) : c.after(s),
          w.undoManager.add()) : (W.bind(w)(h, [{
            action: `E:旁白-没有找到起始元素-画${a}`,
            html: s
          }]),
            W.bind(w)(u, {
              content: `PE3: 画${a}出现错误。`
            }))
      } else {
        if (/<[^>]+>/g.test(t)) {
          let i = jQuery("<div></div>");
          if (i.append(t),
            i.find(".tj-role-name").remove(),
            i.find(".tj-remove-mark").remove(),
            t = i.html() || "",
            "anchor" === e) {
            let e = D(n, t);
            t = e.html,
              d = e.lastLid
          } else
            t = M(n, t)
        } else if ("anchor" === e) {
          let e = D(n, t);
          t = e.html,
            d = e.lastLid
        } else
          t = M(n, t);
        let i = jQuery(w.selection.getNode());
        if (i.is("mark")) {
          if (i.is(".tj-rc-item"))
            return W.bind(w)(l, {
              content: `不能再右键插入的内容上画${a}。`,
              type: "warning",
              time: 1e4
            }),
              !1;
          t && (w.execCommand("RemoveFormat"),
            w.selection.setContent(t),
            w.undoManager.add())
        } else
          t && (w.selection.setContent(t),
            w.undoManager.add())
      }
      return d
    }
    , R = function () {
      if (this.getDoc()) {
        let e = this.getDoc().documentElement
          , t = this.getBody()
          , n = "scrollTop"
          , i = "scrollHeight"
          , r = (e[n] || t[n]) / ((e[i] || t[i]) - e.clientHeight);
        Number.isNaN(r) && (r = 0);
        let a = 100 * r;
        return Math.ceil(a)
      }
      return 0
    }
    , P = function (e) {
      let t = this.getDoc().documentElement
        , n = this.getBody()
        , i = "scrollHeight"
        , r = e / 100 * ((t[i] || n[i]) - t.clientHeight);
      this.getWin().scrollTo(0, Math.ceil(r)),
        setTimeout((() => {
          clearTimeout(m)
        }
        ), 500)
    }
    , A = function (e) {
      let t = "";
      for (let n in e.style)
        t = t + n + ":" + e.style[n] + ";";
      return '<mark class="tj-rc-item" style="' + t + '">' + e.value + "</mark>"
    };
  var W = function (t, n) {
    ["messageHanderWithRoleMenu", "messageHanderWithEditor"].forEach((i => {
      "function" == typeof e[i] && e[i]({
        data: {
          action: t,
          params: n
        }
      })
    }
    ))
  }
    , H = function (e, t) {
      let n = (e = jQuery(e)).clone();
      e.is("p") || (n = e.parents("p").clone());
      let i = new Set;
      if (n.find("mark[data-rid]").each((function (e, t) {
        i.add(t.dataset.rid)
      }
      )),
        t) {
        let e = jQuery("<div></div>");
        e.append(t),
          e.find("mark[data-rid]").each((function (e, t) {
            i.add(t.dataset.rid)
          }
          ))
      }
      if (0 == i.size) {
        e.is("p") || (e = e.parents("p"));
        let t = e.prev()
          , n = e.next();
        t.find("mark[data-rid]").each((function (e, t) {
          i.add(t.dataset.rid)
        }
        )),
          n.find("mark[data-rid]").each((function (e, t) {
            i.add(t.dataset.rid)
          }
          ))
      }
      return [...i.values()]
    }
    , I = function (e) {
      let t = jQuery(e);
      t.is("p") || (t = t.parents("p"));
      let n = new Set;
      if (t.length) {
        let e = t.prev()
          , i = t.next();
        for (e.find("mark[data-rid]").each((function (e, t) {
          n.add(t.dataset.rid)
        }
        )),
          i.find("mark[data-rid]").each((function (e, t) {
            n.add(t.dataset.rid)
          }
          )); e.length;)
          e.find("mark[data-rid]").each((function (e, t) {
            n.add(t.dataset.rid)
          }
          )),
            e = e.prev();
        for (; i.length;)
          i.find("mark[data-rid]").each((function (e, t) {
            n.add(t.dataset.rid)
          }
          )),
            i = i.next()
      } else
        jQuery(w.getBody()).find("mark[data-rid]").each((function (e, t) {
          n.add(t.dataset.rid)
        }
        ));
      return n
    }
    , O = function (e, n) {
      clearTimeout(j),
        j = setTimeout((() => {
          if (this.readonly || 2 == e.button)
            return Q = !1,
              !1;
          Q = !0;
          let i = this.selection.getContent({
            format: "html"
          }) || ""
            , r = this.selection.getContent({
              format: "text"
            }) || ""
            , { clientX: a, clientY: l, layerX: d, layerY: s, offsetX: c, offsetY: f, pageX: m, pageY: p, screenX: y, screenY: g } = e
            , b = null
            , j = ""
            , v = (n = n || jQuery(e.currentTarget)).attr("data-lid");
          if (n.is(".tj-role-selection") && v ? (b = n,
            j = "replace") : n.is(".lines-keywords") && v && (b = n,
              j = ""),
            b) {
            this.selection.select(b[0]);
            let e = H(b)
              , n = I(b);
            W.bind(this)(t, {
              clientX: a,
              clientY: l,
              layerX: d,
              layerY: s,
              offsetX: c,
              offsetY: f,
              pageX: m,
              pageY: p,
              screenX: y,
              screenY: g,
              html: i,
              action: j,
              rids: e,
              text: r,
              lids: [v],
              chapterRids: n
            }),
              W.bind(this)(o, {
                html: i,
                hasLines: !0
              })
          } else
            W.bind(this)(h, [{
              action: "E:显示锚点弹窗-没有找到台词",
              lid: v,
              html: n.prop("outerHTML")
            }]),
              W.bind(w)(u, {
                content: "LE: 出现未知错误。"
              });
          setTimeout((() => {
            Q = !1,
              oe()
          }
          ), 100)
        }
        ), 70)
    }
    , _ = function (e) {
      if ("doubleAside" == we())
        return W.bind(this)(t, {
          html: ""
        }),
          !1;
      clearTimeout(j),
        j = setTimeout((() => {
          let n = this.selection.getNode();
          if (this.readonly || 2 == e.button || jQuery(n).is(".tj-py"))
            return Q = !1,
              !1;
          e.stopPropagation(),
            e.preventDefault(),
            Q = !0;
          let i = this.selection.getContent({
            format: "html"
          }) || ""
            , r = this.selection.getContent({
              format: "text"
            }) || ""
            , { clientX: a, clientY: l, layerX: d, layerY: s, offsetX: c, offsetY: h, pageX: u, pageY: f, screenX: m, screenY: p } = e
            , y = !1
            , g = F(r, i, n);
          if ("error" === g)
            return !1;
          let b = []
            , j = new Set;
          g.length && (y = !0),
            (y || i) && (b = H(n, i),
              j = I(n)),
            W.bind(this)(t, {
              clientX: a,
              clientY: l,
              layerX: d,
              layerY: s,
              offsetX: c,
              offsetY: h,
              pageX: u,
              pageY: f,
              screenX: m,
              screenY: p,
              html: i,
              action: "",
              rids: b,
              text: r,
              lids: g,
              chapterRids: j
            }),
            W.bind(this)(o, {
              html: i,
              hasLines: y
            }),
            setTimeout((() => {
              Q = !1
            }
            ), 300)
        }
        ), 400)
    };
  let F = function (e, t, n) {
    if (!(e = Le(e)))
      return [];
    let i = jQuery("<div></div>")
      , r = new Set;
    i.append(t),
      n = jQuery(n);
    let a = (e, t = !0) => {
      let n = jQuery(e).attr("data-lid");
      n ? r.add(n) : t && (W.bind(this)(h, [{
        action: "E:内容中没找到台词",
        lid: n
      }]),
        W.bind(w)(u, {
          content: "FE: 当前自然段内容出现错误。"
        }))
    }
      ;
    a(n, !1),
      n.parents("mark[data-lid]").each(((e, t) => {
        a(t)
      }
      )),
      i.find("mark[data-lid]").each(((e, t) => {
        a(t)
      }
      ));
    let l = oe();
    return "error" === l ? l : [...r.values()]
  }
    , K = function (e) {
      let t = jQuery("<div></div>");
      t.append(e),
        t.find(".tj-cursor-insert").remove();
      let n, i = t.children();
      return 1 == i.length && (i = jQuery(i[0]),
        (i.hasClass("tj-role-selection") || i.hasClass("lines-keywords")) && (n = jQuery(this.getBody()).find("mark[data-lid=" + i.attr("data-lid") + "]"),
          n.length > 1 && (n = jQuery(n[0])))),
        n
    }
    , J = function (e) {
      let t = jQuery("<div></div>")
        , n = []
        , i = jQuery(w.getBody());
      return t.append(e),
        t.find("mark[data-lid]").each(((e, t) => {
          t = jQuery(t),
            i.find("mark[data-lid=" + t.attr("data-lid") + "]").each(((e, t) => {
              n.push(t)
            }
            ))
        }
        )),
        n
    };
  var z = function (e) {
    if (2 == e.button)
      return !1;
    let { clientX: t, clientY: n, layerX: i, layerY: r, offsetX: a, offsetY: l, pageX: o, pageY: d, screenX: s, screenY: c } = e;
    tinymce.dom.DomQuery;
    var h = this.selection.getContent();
    W.bind(this)("showBaiduHanYu", {
      clientX: t,
      clientY: n,
      layerX: i,
      layerY: r,
      offsetX: a,
      offsetY: l,
      pageX: o,
      pageY: d,
      screenX: s,
      screenY: c,
      text: h
    })
  }
    , q = function (e) {
      if (this.readonly)
        return !1;
      let { key: t, code: n, metaKey: l, ctrlKey: o, altKey: d, shiftKey: s } = e;
      if (["pageup", "pagedown"].includes(t.toLowerCase()))
        return e.preventDefault(),
          e.stopPropagation(),
          !1;
      if (["arrowup", "arrowdown"].includes(t.toLowerCase()) && (l || o))
        return e.preventDefault(),
          e.stopPropagation(),
          Re(t.toLowerCase()),
          !1;
      if (["Backspace", "Delete"].includes(t)) {
        let t = tinymce.dom.DomQuery
          , n = this.selection.getNode();
        if (n = t(n),
          n.hasClass("tj-remove-mark")) {
          e.preventDefault(),
            e.stopPropagation();
          let t = n.parent();
          if (n.hasClass("tj-role-name")) {
            n.remove(),
              t.removeAttr("data-rnid");
            let e = ae(t[0]);
            this.selection.select(t[0]);
            let i = t.html();
            this.selection.setContent('<mark class="lines-keywords" ' + e.join(" ") + ">" + i.trim() + "</mark>"),
              n = this.selection.getNode(),
              this.selection.setCursorLocation(n, 0)
          } else
            n.remove();
          W.bind(this)(i),
            W.bind(this)(a)
        } else {
          if (n.hasClass("mceNonEditable"))
            return e.preventDefault(),
              e.stopPropagation(),
              !1;
          if (n.hasClass("tj-cursor-insert")) {
            let t = n.text() || "";
            t = t.trim(),
              t || (e.preventDefault(),
                e.stopPropagation(),
                n.remove())
          }
        }
      } else if (["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"].includes(t)) {
        if (d || l || o)
          return !1;
        var c = this.selection.getContent({
          format: "text"
        });
        if (c && c.trim()) {
          let n = null;
          for (let e of x)
            if (t == e.key && e.roleId) {
              n = e;
              break
            }
          n && (e.preventDefault(),
            e.stopPropagation(),
            W.bind(this)("execHotKey", n))
        }
      } else if ('"' == t || "quote" == n.toLowerCase())
        d ? (e.preventDefault(),
          e.stopPropagation(),
          s ? X.insertRightClickContent.bind(w)("‘’") : X.insertRightClickContent.bind(w)("“”")) : l || o ? s && (e.preventDefault(),
            e.stopPropagation(),
            X.replaceDoubleQuteToSingle.bind(w)()) : W.bind(this)(r);
      else if ("tab" == t.toLowerCase()) {
        e.preventDefault(),
          e.stopPropagation();
        let t = s ? -1 : 1;
        X.focusNextLiens(t)
      }
    }
    , U = function (e) {
      if (this.readonly)
        return !1;
      let { key: t } = e;
      if (["Backspace", "Delete"].includes(t)) {
        let e = jQuery
          , t = this.selection.getNode();
        if (t = e(t),
          t.is("body"))
          return !1;
        t.is("p") || (t = t.parents("p")),
          t.is("p") && (t.find(".lines-keywords").each(((t, n) => {
            let i = (n = e(n)).html().replaceAll("&nbsp;", "").replaceAll(" ", "");
            i = i.trim(),
              i && !["“”", "“", "”"].includes(i) || n.remove()
          }
          )),
            t.find(".tj-role-selection").each(((t, n) => {
              n = e(n);
              let i = jQuery(n).clone(!0);
              i.find(".tj-role-name").remove(),
                Le(i.text() || "") ? 0 == n.find(".tj-role-name").length && (this.selection.select(n[0]),
                  X.clearRole.bind(this)()) : n.remove()
            }
            )))
      } else if ("Enter" == t) {
        this.undoManager.add();
        let e = this.selection.getNode();
        if (e = jQuery(e),
          !e.attr("data-lid")) {
          let t = e.parents("mark[data-lid]");
          t.length && (e = t)
        }
        if (e.is(".tj-role-selection")) {
          let t, n = e.attr("data-lid"), i = e.attr("data-rnid");
          jQuery(this.getBody()).find("mark.tj-role-selection[data-lid=" + n + "]").each(((e, n) => {
            (n = jQuery(n)).attr("data-lid", L()),
              n.attr("data-rnid", i);
            let r = n.find(".tj-role-name");
            r.length ? t = r.clone()[0] : n.prepend(t);
            let a = jQuery(n).clone(!0);
            a.find(".tj-role-name").remove();
            let l = a.text();
            if (l = Le(l),
              l) {
              let e = le(l);
              if (1 == e.length) {
                let [t] = e;
                if ("before" == t) {
                  let e = n.find(".tj-role-name");
                  e.length ? e.after("“") : n.prepend("“")
                } else
                  n.append("”")
              }
            } else
              jQuery(n).remove()
          }
          ))
        }
        if (e.is(".lines-keywords")) {
          let t = e.attr("data-lid");
          jQuery(this.getBody()).find("mark.lines-keywords[data-lid=" + t + "]").each(((e, t) => {
            let n = (t = jQuery(t)).text()
              , i = t.html() || "";
            if (n = Le(n),
              n) {
              let e = le(n);
              if (1 == e.length) {
                let [t] = e;
                "before" == t ? i = "“" + i : i += "”"
              }
              t.replaceWith('<mark class="lines-keywords" data-lid="' + L() + '">' + i + "</mark>")
            } else
              t.remove()
          }
          ))
        }
        Pe()
      }
    }
    , V = function (e) {
      if (e.preventDefault(),
        e.stopPropagation(),
        this.readonly)
        return !1;
      let t = ""
        , n = jQuery(e.target);
      if (n.hasClass("tj-inout") || n.is(".tj-py") || n.is(".tj-rt"))
        return !1;
      if (n.parents(".tj-inout").length)
        return !1;
      if (n.hasClass("tj-rc-item"))
        t = "replace",
          this.selection.select(e.target);
      else if (n.hasClass("tj-role-name")) {
        let e = n.parent()[0];
        this.selection.select(e),
          this.selection.setCursorLocation(e, 0)
      }
      let { clientX: i, clientY: r, layerX: a, layerY: l, offsetX: o, offsetY: d, pageX: s, pageY: c, screenX: h, screenY: u } = e;
      W.bind(this)("showContextmenu", {
        clientX: i,
        clientY: r,
        layerX: a,
        layerY: l,
        offsetX: o,
        offsetY: d,
        pageX: s,
        pageY: c,
        screenX: h,
        screenY: u,
        action: t
      })
    };
  let G, Z = function (t) {
    clearTimeout(v),
      v = setTimeout((() => {
        let n = this.getDoc();
        if (!n)
          return !1;
        let i = n.documentElement.scrollTop
          , r = t.currentTarget
          , a = jQuery(r).clone(!0);
        a.find(".tj-role-name").remove();
        let l = a.text();
        l = l.trim(),
          l.length > 10 && (l = l.slice(0, 10) + "..."),
          "function" == typeof e.showBookmarkHandler && e.showBookmarkHandler({
            offsetTop: r.offsetTop,
            scrollTop: i,
            bookmark: l,
            scrollPercent: R.bind(this)()
          })
      }
      ), 300)
  }, ee = function (e) {
    clearTimeout(m),
      m = setTimeout((() => {
        let e = R.bind(this)();
        W.bind(this)("editorScroll", {
          to: e
        })
      }
      ), 1500)
  }, te = function () {
    let e = this.getBody();
    jQuery(e).off("mouseenter", "p").on("mouseenter", "p", Z.bind(this))
  }, ne = function (e) {
    e.stopPropagation(),
      e.preventDefault(),
      clearTimeout(b),
      b = setTimeout((() => {
        let t = jQuery(e.target);
        if (t.length) {
          let i = Le(t.text());
          if (i) {
            let { clientX: t, clientY: r, layerX: a, layerY: l, offsetX: o, offsetY: d, pageX: s, pageY: c, screenX: h, screenY: u } = e;
            W.bind(this)(n, {
              clientX: t,
              clientY: r,
              layerX: a,
              layerY: l,
              offsetX: o,
              offsetY: d,
              pageX: s,
              pageY: c,
              screenX: h,
              screenY: u,
              action: "show",
              roleName: i
            })
          }
        }
      }
      ), 300)
  }, ie = function (e) {
    e.stopPropagation(),
      e.preventDefault(),
      clearTimeout(b),
      b = setTimeout((() => {
        W.bind(this)(n, {
          action: "hide"
        })
      }
      ), 1500)
  }, re = function (e) {
    e.stopPropagation(),
      e.preventDefault(),
      clearTimeout(b),
      b = setTimeout((() => {
        let t = jQuery(e.currentTarget).parents(".tj-role-selection").attr("data-rnid");
        if (t) {
          let { clientX: i, clientY: r, layerX: a, layerY: l, offsetX: o, offsetY: d, pageX: s, pageY: c, screenX: h, screenY: u } = e;
          W.bind(this)(n, {
            clientX: i,
            clientY: r,
            layerX: a,
            layerY: l,
            offsetX: o,
            offsetY: d,
            pageX: s,
            pageY: c,
            screenX: h,
            screenY: u,
            action: "show",
            roleName: "",
            rnid: t
          })
        }
      }
      ), 300)
  }, ae = function (e) {
    let t = []
      , n = ""
      , i = e.dataset || {};
    for (let e in i)
      "lid" == e && (n = i[e]),
        0 != e.indexOf("mce") && t.push("data-" + e + '="' + i[e] + '"');
    return n || t.push('data-lid="' + L() + '"'),
      t
  }, le = function (e) {
    let t = e.slice(0, 1)
      , n = e.slice(e.length - 1)
      , i = ["“", "”"]
      , r = [];
    return i.includes(t) && r.push("end"),
      i.includes(n) && r.push("before"),
      r
  }, oe = function () {
    let e = jQuery(w.getBody()).find("mark[data-lid] mark[data-lid]");
    if (e.length) {
      W.bind(this)(h, [{
        action: "E:台词嵌套",
        lid: e.attr("data-lid")
      }]);
      let t = [];
      return e.each(((e, n) => {
        let i = jQuery(n).parents("mark[data-lid]");
        0 == i.length && (i = jQuery(n)),
          t.push({
            html: i.prop("outerHTML"),
            lid: i.attr("data-lid")
          })
      }
      )),
        W.bind(w)("linesInLines", {
          content: t
        }),
        "error"
    }
    return !0
  }, de = async function () {
    G = fe.bind(this)();
    let e = G;
    G.nodeType && (e = G.outerHTML);
    let t = jQuery("<div></div>").append(e)
      , n = '<span id="hbtools">' + t.html() + "</span>";
    n = n.replace(/<\s*mark/g, "<span").replace(/mark\s*>/g, "span>");
    let i = t.text()
      , r = new Blob([n], {
        type: "text/html"
      })
      , a = new Blob([i], {
        type: "text/plain"
      })
      , l = new ClipboardItem({
        "text/html": r,
        "text/plain": a
      });
    await navigator.clipboard.write([l])
  }, se = async function (e) {
    let t = ye.bind(this)();
    if (!t)
      return !1;
    if (t = be(),
      t)
      return !1;
    let n = this.selection.getContent();
    if (n = n.trim(),
      !n)
      return !1;
    try {
      await de.bind(this)()
    } catch (e) {
      W.bind(this)(l, {
        content: `复制内容出现问题：${e.toString()}`,
        type: "error",
        time: 0
      })
    }
  }, ce = async function (e) {
    let t = ye.bind(this)();
    if (!t)
      return !1;
    if (t = be(),
      t)
      return !1;
    let n = this.selection.getContent();
    if (n = n.trim(),
      !n)
      return !1;
    try {
      await de.bind(this)(),
        this.selection.setContent(""),
        jQuery(w.getBody()).find("mark.tj-role-selection").each(((e, t) => {
          let n = jQuery(t).clone(!0);
          n.find(".tj-role-name").remove(),
            Le(n.text()) || jQuery(t).remove()
        }
        )),
        this.undoManager.add()
    } catch (e) {
      W.bind(this)(l, {
        content: `剪切内容出现问题：${e.toString()}`,
        type: "error",
        time: 0
      })
    }
  }, he = async function (e) {
    try {
      let e = ye.bind(this)();
      if (!e)
        return !1;
      if (e = be(),
        e)
        return !1;
      let t = null
        , n = await navigator.clipboard.read();
      for (let e of n)
        for (let n of e.types) {
          let i = await e.getType(n);
          if ("text/html" == i.type) {
            let e = await i.text();
            e = jQuery("<div>" + e + "</div>");
            let n = e.find("#hbtools");
            if (n.length) {
              n.find(".tj-cursor-insert").remove();
              let e = n.html();
              e = e.replace(/<\s*span/g, "<mark").replace(/span\s*>/g, "mark>"),
                t = jQuery("<div></div>").append(e).html();
              break
            }
          }
        }
      let i = await navigator.clipboard.readText() || "";
      if (t) {
        let e = this.selection.getNode();
        if (this.selection.getContent())
          return W.bind(this)(l, {
            content: "请您取消选中内容后，再进行粘贴。",
            type: "warning",
            time: 1e4
          }),
            !1;
        e = jQuery(e);
        let n = me.bind(this)(e);
        n || t.nodeType && (t = jQuery(t).clone(),
          t = jQuery("<div></div>").append(t),
          t.find(".tj-role-name").remove(),
          t = t.text()),
          pe.bind(this)(t, n)
      } else {
        i = i.trim(),
          i = i.replace(/\r|\t/gm, "\n"),
          i = i.split("\n");
        let e = "";
        if (i.length > 1)
          for (let t = 0; t < i.length; t++) {
            let n = i[t].trim();
            n && (t > 0 && (n = '<p data-pid="' + L() + '">' + n + "</p>"),
              e += n)
          }
        else
          e = i[0];
        e && this.execCommand("mceInsertContent", !1, e)
      }
    } catch (e) {
      W.bind(this)(l, {
        content: `粘贴内容出现问题：${e.toString()}`,
        type: "error",
        time: 0
      })
    }
  }, ue = async function (e) {
    try {
      let e = ye.bind(this)();
      if (!e)
        return !1;
      if (e = be(),
        e)
        return !1;
      let t = ""
        , n = ""
        , i = await navigator.clipboard.read();
      for (let e of i)
        for (let i of e.types) {
          let r = await e.getType(i);
          "text/html" == r.type ? t = await r.text() : "text/plain" == r.type && (n = await r.text())
        }
      let r = n;
      t && (t = jQuery("<div>" + t + "</div>"),
        r = t.text()),
        r = r.trim(),
        r && pe.bind(this)(r, !0)
    } catch (e) {
      W.bind(this)(l, {
        content: `粘贴内容出现问题：${e.toString()}`,
        type: "error",
        time: 0
      })
    }
  }, fe = function () {
    let e, t = this.selection.getNode();
    t = jQuery(t);
    let n = this.selection.getContent({
      format: "html"
    }) || ""
      , i = this.selection.getContent({
        format: "text"
      }) || ""
      , r = jQuery("<div></div>");
    return r.append(n),
      r.find(".tj-cursor-insert").remove(),
      n = r.html(),
      t.attr("data-lid") ? e = t.text() == i ? t.clone()[0] : n : t.is(".tj-txt-style") || t.is("span") || t.is("mark") ? (t = t.clone(),
        t.html(n),
        e = t[0]) : e = n,
      e
  }, me = function (e) {
    let t = !0
      , n = e.parents("mark[data-lid]");
    return (void 0 !== e.attr("data-lid") || n.length || e.is(".tj-rc-item")) && (t = !1),
      t
  }, pe = function (e, t) {
    if (1 == e.nodeType) {
      if (t) {
        let t = jQuery(e).clone(!0)
          , n = jQuery("<div></div>");
        n.append(t),
          n.find("mark[data-lid]").each(((e, t) => {
            jQuery(t).attr("data-lid", L())
          }
          )),
          this.execCommand("mceInsertContent", !1, n.html() || "")
      }
    } else {
      let n = !1
        , i = (jQuery(this.getBody()),
          jQuery("<div></div>").append(e));
      i.find("p[data-pid]").each(((e, t) => {
        jQuery(t).attr("data-pid", L())
      }
      )),
        i.find("mark[data-lid]").each(((e, t) => {
          jQuery(t).attr("data-lid", L()),
            n = !0
        }
        ));
      let r = i.html();
      n && (t || (i.find(".tj-role-name").remove(),
        r = i.text())),
        this.execCommand("mceInsertContent", !1, r)
    }
  }, ye = function (e = !0) {
    return window.navigator.clipboard ? "function" == typeof navigator.clipboard.read && "function" == typeof navigator.clipboard.write || (e && W.bind(this)(l, {
      content: "错误1：复制粘贴功能无法正常使用，请您联系服务人员。",
      type: "error"
    }),
      !1) : (e && W.bind(this)(l, {
        content: "错误2：复制粘贴功能无法正常使用，请您联系服务人员。",
        type: "error"
      }),
        !1)
  }, ge = function (e) {
    return e.stopPropagation(),
      e.preventDefault(),
      !1
  }, be = function () {
    return "active" == e.WRITE_MODE && (W.bind(w)(l, {
      content: "请您关闭双旁白后，再使用复制粘贴功能。",
      type: "warning",
      time: 1e4
    }),
      !0)
  }, je = function (e) {
    this.execCommand("Undo")
  }, ve = function (e) {
    if ("doubleAside" == we())
      return W.bind(w)(l, {
        content: "请您关闭双旁白后，在进行操作。",
        type: "warning",
        time: 1e4
      }),
        !1;
    let { role: t } = Ee();
    if (!t) {
      let e = w.selection.getContent({
        format: "html"
      })
        , n = K.bind(w)(e);
      n && (t = n[0])
    }
    if (t)
      w.selection.select(t),
        X.clearRole.bind(w)();
    else {
      w.selection.getContent({
        format: "html"
      }).trim() && w.execCommand("RemoveFormat")
    }
  }, Ce = function () {
    X.execCommands.bind(w)("RemoveFormat")
  }, Qe = function () {
    clearTimeout(p),
      p = setTimeout((() => {
        W.bind(this)("saveContent")
      }
      ), 500)
  }, ke = function (e) {
    if (this.readonly)
      return !1;
    if (2 == e.button)
      return !1;
    let t = this.selection.getContent();
    if (t = Le(t),
      t)
      return !1;
    if (Q)
      return !1;
    jQuery(this.getBody()).find(".tj-cursor-insert").each(((e, t) => {
      let n = (t = $(t)).html() || "";
      n = n.replaceAll("&nbsp;", ""),
        n = n.trim(),
        n && t.replaceWith(n)
    }
    ));
    let n = this.selection.getEnd(!1);
    if (n = jQuery(n),
      n.is(".tj-role-name")) {
      let e = n.parents(".tj-role-selection");
      e.length && (n = e)
    }
    if (n.is(".tj-role-selection") || n.is(".lines-keywords") || n.is(".tj-rc-item")) {
      let e = '<mark class="tj-cursor-insert" style="margin-left: -0.5em;">&nbsp;</mark>'
        , t = function (e) {
          var t, n = 0, i = e.ownerDocument || e.document, r = i.defaultView || i.parentWindow;
          if (void 0 !== r.getSelection) {
            if ((t = r.getSelection()).rangeCount > 0) {
              var a = t.getRangeAt(0)
                , l = a.cloneRange();
              l.selectNodeContents(e),
                l.setEnd(a.endContainer, a.endOffset),
                n = l.toString().length
            }
          } else if ((t = i.selection) && "Control" != t.type) {
            var o = t.createRange()
              , d = i.body.createTextRange();
            d.moveToElementText(e),
              d.setEndPoint("EndToEnd", o),
              n = d.text.length
          }
          return n
        }(n[0])
        , i = n.text().length;
      if (0 == t) {
        let t = n.prev();
        if (t.is(".tj-cursor-insert")) {
          let e = t.html() || "";
          e = e.replaceAll("&nbsp;", ""),
            e = e.trim(),
            e ? t.replaceWith(e) : t.remove()
        }
        let i = jQuery(e);
        i.insertBefore(n),
          this.selection.setCursorLocation(i[0], 1)
      } else if (t == i) {
        let t = n.next();
        if (t.is(".tj-cursor-insert")) {
          let e = t.html() || "";
          e = e.replaceAll("&nbsp;", ""),
            e = e.trim(),
            e ? t.replaceWith(e) : t.remove()
        }
        let i = jQuery(e);
        i.insertAfter(n),
          this.selection.setCursorLocation(i[0], 1)
      }
    }
  }, xe = function (e) {
    e.preventDefault(),
      e.stopPropagation();
    let t = $(e.currentTarget).parents(".tj-role-selection");
    t.length && (this.selection.select(t[0]),
      O.bind(this)(e, t)),
      oe()
  }, we = function () {
    let t = "write";
    return "active" == e.WRITE_MODE && (t = "doubleAside"),
      t
  }, Te = function (e) {
    "doubleAside" == we() && $(this).removeClass("aside-lines").removeAttr("style").addClass("temp-aside-lines")
  }, Se = function () {
    if ("doubleAside" == we()) {
      let e = localStorage.getItem("doubleAsideStyle");
      if (e) {
        e = JSON.parse(e);
        let t = JSON.parse(e.style);
        $(this).addClass("aside-lines").removeClass("temp-aside-lines").css(t)
      } else
        W.bind(w)(l, {
          content: "您还没有选择旁白的样式。",
          type: "warning"
        })
    }
  }, Ee = function () {
    let e = w.selection.getNode();
    e = $(e);
    let t = null
      , n = "";
    if (e.hasClass("hl-role-name")) {
      let n = e.parent();
      n.is(".lines-keywords") ? t = n[0] : n.is(".tj-role-selection") && (e = n)
    }
    return e.hasClass("tj-role-name") ? (t = e.parent()[0],
      n = "replace") : e.hasClass("tj-role-selection") ? (t = e[0],
        n = "replace") : e.hasClass("lines-keywords") && (t = e[0],
          n = ""),
    {
      role: t,
      action: n
    }
  }, Le = e.trimTxt, Xe = function (e) {
    let t = jQuery(e.currentTarget);
    t.is("p") && t.find(".tj-role-name").removeAttr("contenteditable").removeClass("mceNonEditable")
  }, Ye = function (e) {
    let t = jQuery(e.currentTarget);
    t.is("p") && t.find(".tj-role-name").attr("contenteditable", "false").addClass("mceNonEditable")
  }, Be = function (e) {
    e.stopPropagation(),
      e.preventDefault();
    let { metaKey: t, ctrlKey: n } = e;
    if (t || n) {
      let t = jQuery(e.currentTarget).parents(".tj-role-selection").attr("data-rnid");
      t && W.bind(this)("chooseRind", {
        rnid: t
      })
    }
  }, De = function (e) {
    let t = !1;
    for (let n of S)
      if (e.indexOf(n) > -1) {
        t = !0;
        break
      }
    return t
  }, Me = function () {
    clearTimeout(C),
      C = setTimeout((() => {
        let t = jQuery(w.getBody())
          , n = 0;
        t.find("p").each(((t, i) => {
          let r = jQuery(i)
            , a = r.clone(!0)
            , l = 0
            , o = localStorage.getItem("fullwrodage");
          o && (o = JSON.parse(o)),
            "clean" === o ? l = e.computedRealWords(a.html() || "") : (a.find(".tj-role-name").remove(),
              a.find(".tj-rc-item").remove(),
              a.find(".tj-rt").remove(),
              l = Le(a.text()).length),
            n += l,
            r.attr("data-content-after", ":after").attr("data-content-after", l),
            r.attr("data-content-before", ":before").attr("data-content-before", n)
        }
        ))
      }
      ), 1e3)
  }, Ne = function (e) {
    W.bind(this)("changeEditMode")
  }, Re = function (e) {
    if (!w)
      return !1;
    let t = jQuery(w.selection.getNode());
    if (t.is("body") && W.bind(w)(l, {
      content: "不能同时移动多个自然段。",
      type: "warning",
      time: 1e4
    }),
      !t.is("p")) {
      let e = t.parents("p");
      if (!e.is("p"))
        return !1;
      t = e
    }
    if ("arrowup" == e) {
      let e = t.prev();
      e.length && (e.insertAfter(t),
        w.undoManager.add())
    } else if ("arrowdown" == e) {
      let e = t.next();
      e.length && (e.insertBefore(t),
        w.undoManager.add())
    }
  }, $e = function (e) {
    clearTimeout(y),
      y = setTimeout((() => {
        jQuery(w.getBody()).find("p").each(((e, t) => {
          let n = (t = jQuery(t)).attr("data-pid")
            , i = t.text();
          i = Le(i),
            "needreplace" == n && t.removeAttr("data-cn").attr("data-pid", L()),
            i || t.remove()
        }
        )),
          "function" == typeof e && e()
      }
      ), 100)
  }, Pe = function (e) {
    clearTimeout(g),
      g = setTimeout((() => {
        jQuery(w.getBody()).find("p").each(((e, t) => {
          "needreplace" == (t = jQuery(t)).attr("data-pid") && t.removeAttr("data-cn").attr("data-pid", L())
        }
        ))
      }
      ), 100)
  }, Ae = function (e) {
    W.bind(this)("findAndReplace")
  }, We = function (e) {
    if (!e)
      return "";
    let t = e.split(";")
      , n = {};
    for (let e of t) {
      if (!e)
        continue;
      let [t, i] = e.split(":");
      t = t.trim(),
        i = i.trim(),
        i && "null" !== i && "undefined" !== i && (n[t] = i)
    }
    if (e = n["text-decoration"]) {
      t = e.split(" ");
      for (let e = 0; e < t.length; e++)
        "line-through" == t[e] && t.splice(e, 1);
      0 == t.length && delete n["text-decoration"]
    }
    t = [];
    for (let e in n)
      t.push(`${e}:${n[e]}`);
    return t.length && t.push(";"),
      t.join(";")
  }, He = function (e) {
    if (e.preventDefault(),
      e.stopPropagation(),
      w.readonly)
      return !1;
    let t = jQuery(e.currentTarget);
    if (!t.length)
      return !1;
    let n = t.clone();
    n.find(".tj-rt").remove();
    let i = n.text();
    if (i = Le(i),
      i) {
      let e = t.attr("data-pyid");
      e || (e = L(),
        t.attr("data-pyid", e)),
        W.bind(w)(f, {
          content: i,
          pyid: e
        })
    }
  };
  e.getScrollPercent = R,
    e.execTJEditorMethod = function (e, t) {
      "function" == typeof X[e] ? X[e].bind(w)(t) : W.bind(w)(l, {
        content: `${e} action not found!`,
        type: "error",
        time: 1e4
      })
    }
    ,
    e.editorPluginComputePWordage = Me;
  var Ie = function (t) {
    w = t,
      w.on("init", (function (t) {
        let n = w.getWin()
          , i = w.getBody();
        if (n.addEventListener("scroll", ee.bind(w), !1),
          w.readonly)
          i.addEventListener("mouseup", z.bind(w), !1),
            i.addEventListener("contextmenu", (function (e) {
              e.preventDefault(),
                e.stopPropagation()
            }
            ), !1);
        else {
          n.addEventListener("drop", ge, !1),
            n.addEventListener("dragstart", ge, !1),
            n.addEventListener("dragend", ge, !1),
            w.addShortcut("meta+s", "CustomSave", Qe.bind(w), !1),
            w.addShortcut("meta+z", "CustomUndo", je.bind(w)),
            w.addShortcut("meta+v", "CustomPaste", he.bind(w)),
            w.addShortcut("meta+shift+v", "CustomShiftPaste", ue.bind(w)),
            w.addShortcut("meta+c", "CustomCopy", se.bind(w)),
            w.addShortcut("meta+x", "CustomCut", ce.bind(w)),
            w.addShortcut("meta+shift+d", "CustomDeleteLine", (function () { }
            )),
            w.addShortcut("meta+u", "CustomUnderLine", (function () { }
            )),
            w.addShortcut("meta+b", "CustomFontBold", (function () { }
            )),
            w.addShortcut("meta+i", "CustomFontItalic", (function () { }
            )),
            w.addShortcut("meta+e", "CustomEditMode", Ne.bind(w)),
            w.addShortcut("meta+f", "CustomFindAndReplace", Ae.bind(w)),
            w.addShortcut("alt+z", "CustomClean", ve.bind(w)),
            w.addShortcut("alt+c", "CustomCleanStyle", Ce.bind(w)),
            w.addShortcut("alt+e", "CustomMergeP", X.mergeMoreP),
            w.addShortcut("alt+m", "CustomMergeP", X.mergeMoreLines),
            w.addShortcut("alt+1", "ReCustomUnderLine", (() => {
              W.bind(this)("fontAddUnderLine")
            }
            )),
            w.addShortcut("alt+2", "ReCustomDeleteLine", (() => {
              W.bind(this)(d)
            }
            )),
            w.addShortcut("alt+d", "ReCustomDeleteLine", (() => {
              W.bind(this)(d)
            }
            )),
            w.addShortcut("alt+3", "inserOS", (() => {
              W.bind(this)(s, {
                action: "OS"
              })
            }
            )),
            w.addShortcut("alt+4", "inser[", (() => {
              W.bind(this)(s, {
                action: "["
              })
            }
            )),
            w.addShortcut("alt+5", "inser(", (() => {
              W.bind(this)(s, {
                action: "("
              })
            }
            )),
            w.addShortcut("alt+s", "inserOS", (() => {
              W.bind(this)(s, {
                action: "OS"
              })
            }
            )),
            i.addEventListener("mouseup", _.bind(w), !1),
            i.addEventListener("mouseup", ke.bind(w), !1),
            i.addEventListener("keydown", q.bind(w), !1),
            i.addEventListener("keyup", U.bind(w), !1),
            i.addEventListener("contextmenu", V.bind(w), !1);
          let e = $(i);
          e.on("mouseenter", ".hl-role-name", ne.bind(this)),
            e.on("mouseleave", ".hl-role-name, .tj-role-name", ie.bind(this)),
            e.on("mouseenter", ".tj-role-name", re.bind(this)),
            e.on("click", ".tj-role-name", Be.bind(this)),
            e.on("mousedown", "p", Xe.bind(this)),
            e.on("mouseup", "p", Ye.bind(this)),
            e.on("dblclick", ".tj-role-name", xe.bind(this)),
            e.on("dblclick", ".lines-keywords, .tj-role-selection", O.bind(this)),
            e.on("click", ".aside-lines", Te),
            e.on("click", ".temp-aside-lines", Se),
            e.on("click", ".tj-py", He),
            e.on("keyup", Me)
        }
        !function (t) {
          !!ye.bind(t)() && !(!navigator.permissions || !navigator.permissions.query) && navigator.permissions.query({
            name: "clipboard-read"
          }).then((n => {
            "denied" == n.state && W.bind(t)(l, {
              content: "复制粘贴功能被关闭了无法正常使用，请您联系服务人员。",
              type: "error",
              time: 15e3
            }),
              n.onchange = async n => {
                let { state: i } = n.target;
                if ("denied" == i)
                  return W.bind(t)(l, {
                    content: "您关闭了复制粘贴功能，无法正常使用。",
                    type: "error",
                    time: 0
                  }),
                    !1;
                "Edge" == (await e.browser()).browser && "granted" == i && W.bind(t)(l, {
                  content: "如果没有粘贴成功，请您关闭浏览器重新打开。",
                  type: "info",
                  time: 0
                })
              }
          }
          )).catch((e => {
            W.bind(t)(l, {
              content: `错误CB：${e.toString()}`,
              type: "error",
              time: 0
            })
          }
          ))
        }(w)
      }
      )),
      w.on("NodeChange", (function (e) {
        if (W.bind(this)("nodeChange"),
          e.selectionChange)
          return !1;
        let t = (e = e.element).dataset || {};
        if ((e = $(e)).is("p")) {
          "needreplace" == t.pid && Pe()
        }
      }
      ))
  };
  k.add("tieji", (function (e) {
    Ie(e)
  }
  ))
}(window.top);
